package dev.gl.sudoku_solver.db.common;

import dev.gl.sudoku_solver.logging.Logging;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author gl
 */
public class HyperConnection {

    private static HyperConnection instance;
    private static Logger logger = Logging.getLocalLogger(HyperConnection.class);
    private Connection con;

    /*
    SET DATABASE DEFAULT TABLE TYPE { CACHED | MEMORY };
     */
    private HyperConnection() {
    }

    public static HyperConnection getInstance() {
        if (instance == null) {
            instance = new HyperConnection();
            logger.log(Level.CONFIG, "HyperConnection instance created");
        }
        return instance;

    }

    public void setConnection() {
        try {
            con = DriverManager.getConnection("jdbc:hsqldb:file:sudoku_db;shutdown=true", "SA", "");
            setInitialParameters();
            logger.log(Level.CONFIG, "con to db established");
            createTablesAtFirstLaunch();
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    public void closeConnection() {
        if (con == null) {
            return;
        }

        try {
            if (!con.isClosed()) {
                con.rollback();
                con.close();
                logger.log(Level.CONFIG, "con to db closed");
            }
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    private void setInitialParameters() {
        try (Statement stmt = con.createStatement()) {
            stmt.executeUpdate("SET DATABASE DEFAULT TABLE TYPE MEMORY;");
            stmt.close();
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    private void createTablesAtFirstLaunch() {
        preparingStatsTable();
        preparingSettingsTable();
    }

    private void preparingStatsTable() {
        try (Statement stmt = con.createStatement()) {
            // creating 'stats' table
            String query = """
                           CREATE TABLE IF NOT EXISTS stats (
                            launches INT,
                            runtime INT,
                            failures INT
                           );
                           """;
            stmt.executeUpdate(query);

            // checks if 'stats' table is empty
            ResultSet resultSet = stmt.executeQuery("SELECT * FROM stats");
            if (!resultSet.isBeforeFirst()) {
                // if 'stats' is empty, insert a new row there
                stmt.executeUpdate("INSERT INTO stats VALUES (0, 0, 0)");
                logger.config("Insert first row in the \"stats\" table");
            }

        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    private void preparingSettingsTable() {
        try (Statement stmt = con.createStatement()) {
            // creating 'settings' table
            String query = """
                           CREATE TABLE IF NOT EXISTS settings (
                            id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            parameter VARCHAR(50) NOT NULL,
                            val_bool BOOLEAN,
                            val_int INT,
                            val_string VARCHAR(50)
                           );
                           """;
            stmt.executeUpdate(query);

            // checks if 'settings' table is empty
            ResultSet resultSet = stmt.executeQuery("SELECT * FROM settings");
            if (!resultSet.isBeforeFirst()) {
                // if 'settings' is empty, insert a new row there
                stmt.executeUpdate("INSERT INTO settings VALUES (0, 'show_results_each_time', true, null, null)");
                logger.config("Insert first row in the \"settings\" table");
            }

        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    public Connection getCon() {
        return con;
    }
    
}
